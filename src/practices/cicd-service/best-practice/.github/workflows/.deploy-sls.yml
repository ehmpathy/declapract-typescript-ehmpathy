name: .deploy-sls

on:
  workflow_call:
    inputs:
      stage:
        type: string
        description: 'the stage to deploy to'
        required: true
      github-environment:
        type: string
        description: 'the github environment that the apply step will be executed in'
        required: true
      aws-region:
        type: string
        description: the aws region within which we should access
        required: true
      aws-account-id:
        type: string
        description: the id of the account the credentials are expected to access
        required: true
      needs-vpn-for-acceptance:
        type: boolean
        description: whether or not this environment needs vpn access for acceptance tests
        required: false
        default: false
    secrets:
      aws-access-key-id:
        required: true
        description: required credentials to authenticate with aws provider and state persistance
      aws-secret-access-key:
        required: true
        description: required credentials to authenticate with aws provider and state persistance
      open-vpn-config:
        required: false
        description: complete openvpn config required to enter the vpn, if needed

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: set node-version
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        id: credentials
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      - name: confirm aws credentials
        run: |
          [[ ${{steps.credentials.outputs.aws-account-id}} != ${{ inputs.aws-account-id }} ]] \
            && echo 'wrong aws account' && exit 1 \
            || echo 'correct aws account';

      - name: node-modules cache get
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: node-modules cache miss install
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts --prefer-offline --no-audit

      - name: deploy
        run: STAGE=${{ inputs.stage }} DEPLOYER_NAME=$GITHUB_ACTOR npm run deploy

  assure:
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: set node-version
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        id: credentials
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      - name: confirm aws credentials
        run: |
          [[ ${{steps.credentials.outputs.aws-account-id}} != ${{ inputs.aws-account-id }} ]] \
            && echo 'wrong aws account' && exit 1 \
            || echo 'correct aws account';

      - name: node-modules cache get
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: node-modules cache miss install
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts --prefer-offline --no-audit

      - name: vpn:prepare
        if: inputs.needs-vpn-for-acceptance
        run: |
          sudo apt update \
          && sudo apt-get install openvpn openvpn-systemd-resolved \
          && mkdir ~/.vpn \
          && echo "${{ secrets.open-vpn-config }}" | base64 -d > ~/.vpn/vpn.connection.ovpn

      - name: vpn:connect
        if: inputs.needs-vpn-for-acceptance
        run: |
          # create the log file, so that we have permissions to read it
          touch openvpn.log

          # start openvpn in the background
          sudo openvpn --config ~/.vpn/vpn.connection.ovpn --daemon --log openvpn.log

          # wait until we've confirmed that it successfully connected; https://superuser.com/a/900134/425694
          ( tail -f -n0 openvpn.log & ) | grep -q "Initialization Sequence Completed"

      - name: test:acceptance
        run: STAGE=${{ inputs.stage }} npm run test:acceptance

      - name: vpn:disconnect
        if: inputs.needs-vpn-for-acceptance
        run: sudo killall openvpn

  prune:
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: set node-version
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        id: credentials
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      - name: confirm aws credentials
        run: |
          [[ ${{steps.credentials.outputs.aws-account-id}} != ${{ inputs.aws-account-id }} ]] \
            && echo 'wrong aws account' && exit 1 \
            || echo 'correct aws account';

      - name: node-modules cache get
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: node-modules cache miss install
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts --prefer-offline --no-audit

      - name: prune
        run: STAGE=${{ inputs.stage }} DEPLOYER_NAME=$GITHUB_ACTOR npm run deploy:prune
