import { fix } from './*.integration.test.ts.declapract';

describe('*.integration.test.ts', () => {
  it('should replace deep omit with omitAutogeneratedValues correctly', async () => {
    const exampleBadPracticeContents = `
import {
  DatabaseConnection,
  getDatabaseConnection,
} from '../../../utils/database/getDatabaseConnection';
import { findById } from './findById.query';
import { upsert } from './upsert.query';
import { deepOmit } from '../../../__nonpublished_modules__/deep-omit';
import { createExampleEmail } from '../../../__test_utils__/createExampleEmail';

describe('findById', () => {
  let dbConnection: DatabaseConnection;
  beforeAll(async () => {
    dbConnection = await getDatabaseConnection();
  });
  afterAll(async () => {
    await dbConnection.end();
  });
  it('should be able to find an upserted record', async () => {
    const upserted = await upsert({
      dbConnection,
      email: createExampleEmail(),
    });
    const found = await findById({ dbConnection, id: upserted.id! });
    expect(deepOmit(upserted, ['id'])).toEqual(deepOmit(found!, ['id']));
  });
});
    `.trim();
    const { contents: fixedContents } = await fix(
      exampleBadPracticeContents,
      {} as any,
    );
    console.log(fixedContents);
    expect(fixedContents).toContain(
      'expect(omitAutogeneratedValues(upserted)).toEqual(omitAutogeneratedValues(found!))',
    );
    expect(fixedContents).toMatchSnapshot();
  });
});
