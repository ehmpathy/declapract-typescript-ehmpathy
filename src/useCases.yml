# define the different types of combinations of the best practices that we support
use-cases:
  typescript-project:
    practices:
      - cicd-integrate
      - conventional-commits
      - directory-structure-src
      - domain
      - environments
      - errors
      - format
      - git
      - linting
      - node
      - nonpublished-modules
      - package-json-order
      - prettier
      - testing
      - typescript
      - uuid
  npm-package:
    extends:
      - typescript-project
    practices:
      - cicd-deploy-package
      - node-package
  lambda-service:
    extends:
      - typescript-project
    practices:
      - artifact
      - cicd-deploy-service
      - config
      - dates-and-times
      - environments-aws
      - lambda-clients
      - lambda-handlers
      - logging
      - node-service
      - runtime-type-checking
      - serverless
      - terraform
  lambda-service-with-rds:
    extends:
      - typescript-project # https://github.com/ehmpathy/declapract/issues/17
      - lambda-service
    practices:
      - persist-with-rds
  lambda-service-with-dynamodb: # note that projects can still use both by specifying the `declapract.use-case: [lambda-service-with-dynamodb, lambda-service-with-rds]` since we allow use-cases to add together. `use-cases` just enable us to enforce a "minimum" set of practices
    extends:
      - typescript-project # https://github.com/ehmpathy/declapract/issues/17
      - lambda-service
    practices:
      - persist-with-dynamodb
