service: @declapract{variable.projectName}

package:
  artifact: .artifact/contents.zip

plugins:
  - serverless-prune-plugin

provider:
  name: aws
  runtime: nodejs16.x
  memorySize: 1024 # optional, in mb, default is 1024
  timeout: 60 # default timeout to 1min, for resilience against increased cold start times; individual functions can override this
  stage: ${opt:stage}
  stackTags:
    app: @declapract{variable.organizationName}
    environment: ${self:provider.stage}
    product: ${self:service}
  environment:
    TZ: UTC # guarantee that utc timezone will be used explicitly, to facilitate a pit of success
    NODE_ENV: production # deploy with production optimizations of all resources, to make `dev` and `prod` stage deployments equivalent functionally (i.e., the same code paths in dev and prod)
    STAGE: ${self:provider.stage} # deploy specifying which stage we're targeting, to enable targeting the correct config + resources (e.g., hit dev db -vs- prod db)
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: true # https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html
  deploymentBucket: serverless-deployment-@declapract{variable.infrastructureNamespaceId}-${self:provider.stage}
  vpc:
    securityGroupIds:
      - ${ssm:/tf/infrastructure/vpc/main/lambdaSecurityGroupId}
    subnetIds:
      - ${ssm:/tf/infrastructure/vpc/main/lambdaSubnet1Id}
      - ${ssm:/tf/infrastructure/vpc/main/lambdaSubnet2Id}
      - ${ssm:/tf/infrastructure/vpc/main/lambdaSubnet3Id}
  iamRoleStatements:
    # parameter store access
    - Effect: 'Allow'
      Action: 'ssm:DescribeParameters'
      Resource: '*'
    - Effect: 'Allow'
      Action: 'ssm:GetParameters'
      Resource: arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/*
    - Effect: 'Allow'
      Action: 'kms:Decrypt'
      Resource: arn:aws:kms:${aws:region}:${aws:accountId}:alias/aws/ssm*
    # allow invocation of other lambdas
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: '*'
    # allow reading and writing to s3 buckets namespaced by this service
    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:ListObjects
        - s3:GetObject
        - s3:PutObject
        - s3:GetBucketLocation
        - s3:ListBucketMultipartUploads
        - s3:ListMultipartUploadParts
        - s3:AbortMultipartUpload
      Resource: arn:aws:s3:::${self:service}-* # note, region and account can not be included in this resource arn, otherwise aws throws error
    # allow reading and writing to sqs queues namespaced to this service
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
      Resource: arn:aws:sqs:${aws:region}:${aws:accountId}:${self:service}-*
    # allow reading and writing to dynamodb tables namespaced to this service
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-* # allow read and write to all tables w/ this services name prefix
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/infrastructure-${self:provider.stage}-table-domain-driven-cache # allow read and write to global domain driven cache
    # allow publishing to sns topics namespaced by this service
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource: arn:aws:sns:${aws:region}:${aws:accountId}:${self:service}-*
